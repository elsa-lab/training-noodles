# Name of the spec
name: Train TensorFlow example

# Description of the spec
description: Train three TensorFlow examples on two servers and download the results

################################################################################
# Experiments
################################################################################

# Experiment 1: https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/1_Introduction/basic_operations.py
# Experiment 2: https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/2_BasicModels/logistic_regression.py
# Experiment 3: https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/neural_network.py

# The default properties for each experiment
experiment_default:
  envs:
    CONDA_DIR: $HOME/anaconda3
    CONDA_ENV_NAME: noodles_test
    # "$" sign is escaped here to make sure "$HOME" is interpreted on server rather than on local
    ESCAPED_STDERR_PATH: \$HOME/tensorflow_results.$EXPERIMENT.stderr.log
    ESCAPED_STDOUT_PATH: \$HOME/tensorflow_results.$EXPERIMENT.stdout.log
    LOCAL_DIR: examples/train_tensorflow_examples
    LOCK_FILE_PATH: $HOME/noodles.lock
    MARKER_PATH: $HOME/marker_$EXPERIMENT.txt
    STDERR_PATH: $HOME/tensorflow_results.$EXPERIMENT.stderr.log
    STDOUT_PATH: $HOME/tensorflow_results.$EXPERIMENT.stdout.log
    TF_EXAMPLE_URL: https://github.com/aymericdamien/TensorFlow-Examples.git
    TMUX_SESSION_PREFIX: test
  write_outputs:
    run:
      # $NOODLES_EXPERIMENT_NAME is the name of current experiment
      stdout_to: '$LOCAL_DIR/commands_results.$NOODLES_EXPERIMENT_NAME.stdout.log'
      stderr_to: '$LOCAL_DIR/commands_results.$NOODLES_EXPERIMENT_NAME.stderr.log'

# The main experiments
experiments:

### 1st Phase: Initialize Experiments ###

- name: init_exp1
  description: Mark the server by a unique file name, download TensorFlow-Examples on the server, and create a new conda environment
  envs:
    EXPERIMENT: exp1
  requirements:
    run:
    - has_lock_file: "==No"
  commands:
    run:
    # Go to home directory
    - "cd ~"
    # Create a lock file
    - "touch $LOCK_FILE_PATH"
    # Create a marker file on this server
    - "touch $MARKER_PATH"
    # Clone TensorFlow-Examples
    - "echo Cloning TensorFlow-Examples on $NOODLES_SERVER_NAME"
    - "git clone $TF_EXAMPLE_URL"
    # Create a new conda environment
    - "echo Creating conda environment $CONDA_ENV_NAME on $NOODLES_SERVER_NAME"
    - "$CONDA_DIR/bin/conda create -y -n $CONDA_ENV_NAME python=3.6"

- name: init_exp2
  description: Mark the server by a unique file name and download TensorFlow-Examples on the server
  envs:
    EXPERIMENT: exp2
  requirements:
    run:
    - has_lock_file: "==No"
  commands:
    run:
    # Go to home directory
    - "cd ~"
    # Create a lock file
    - "touch $LOCK_FILE_PATH"
    # Create a marker file on this server
    - "touch $MARKER_PATH"
    # Clone TensorFlow-Examples
    - "echo Cloning TensorFlow-Examples on $NOODLES_SERVER_NAME"
    - "git clone $TF_EXAMPLE_URL"
    # Create a new conda environment
    - "echo Creating conda environment $CONDA_ENV_NAME on $NOODLES_SERVER_NAME"
    - "$CONDA_DIR/bin/conda create -y -n $CONDA_ENV_NAME python=3.6"

- name: init_exp3
  description: Mark the server by a unique file name and download TensorFlow-Examples on the server
  envs:
    EXPERIMENT: exp3
  requirements:
    run:
    - has_lock_file: "==No"
  commands:
    run:
    # Go to home directory
    - "cd ~"
    # Create a lock file
    - "touch $LOCK_FILE_PATH"
    # Create a marker file on this server
    - "touch $MARKER_PATH"
    # Clone TensorFlow-Examples
    - "echo Cloning TensorFlow-Examples on $NOODLES_SERVER_NAME"
    - "git clone $TF_EXAMPLE_URL"
    # Create a new conda environment
    - "echo Creating conda environment $CONDA_ENV_NAME on $NOODLES_SERVER_NAME"
    - "$CONDA_DIR/bin/conda create -y -n $CONDA_ENV_NAME python=3.6"

### 2nd Phase: Run Experiments ###

- name: run_exp1
  description: Run experiment on server
  envs:
    EXPERIMENT: exp1
    EXPERIMENT_PATH: $HOME/TensorFlow-Examples/examples/1_Introduction/basic_operations.py
  depends_on:
    run:
    - init_exp1
  requirements:
    run:
    - has_lock_file: "==Yes"
    - has_marker_file: "==Yes"
  commands:
    run:
      # Activate the newly created conda environment
      - "source $CONDA_DIR/bin/activate $CONDA_ENV_NAME"
      # Install TensorFlow
      - "echo Installing TensorFlow on $NOODLES_SERVER_NAME"
      - "pip install tensorflow"
      # Create a detached Tmux session to run the TensorFlow example
      - "echo Running TensorFlow example on $NOODLES_SERVER_NAME"
      - |-
        tmux new -d -s "$TMUX_SESSION_PREFIX/$EXPERIMENT" "python $EXPERIMENT_PATH > $STDOUT_PATH 2> $STDERR_PATH"

- name: run_exp2
  description: Run experiment on server
  envs:
    EXPERIMENT: exp2
    EXPERIMENT_PATH: $HOME/TensorFlow-Examples/examples/2_BasicModels/logistic_regression.py
  depends_on:
    run:
    - init_exp2
  requirements:
    run:
    - has_lock_file: "==Yes"
    - has_marker_file: "==Yes"
  commands:
    run:
      # Activate the newly created conda environment
      - "source $CONDA_DIR/bin/activate $CONDA_ENV_NAME"
      # Install TensorFlow
      - "echo Installing TensorFlow on $NOODLES_SERVER_NAME"
      - "pip install tensorflow"
      # Create a detached Tmux session to run the TensorFlow example
      - "echo Running TensorFlow example on $NOODLES_SERVER_NAME"
      - |-
        tmux new -d -s "$TMUX_SESSION_PREFIX/$EXPERIMENT" "python $EXPERIMENT_PATH > $STDOUT_PATH 2> $STDERR_PATH"

- name: run_exp3
  description: Run experiment on server
  envs:
    EXPERIMENT: exp3
    EXPERIMENT_PATH: $HOME/TensorFlow-Examples/examples/3_NeuralNetworks/neural_network.py
  depends_on:
    run:
    - init_exp3
  requirements:
    run:
    - has_lock_file: "==Yes"
    - has_marker_file: "==Yes"
  commands:
    run:
      # Activate the newly created conda environment
      - "source $CONDA_DIR/bin/activate $CONDA_ENV_NAME"
      # Install TensorFlow
      - "echo Installing TensorFlow on $NOODLES_SERVER_NAME"
      - "pip install tensorflow"
      # Create a detached Tmux session to run the TensorFlow example
      - "echo Running TensorFlow example on $NOODLES_SERVER_NAME"
      - |-
        tmux new -d -s "$TMUX_SESSION_PREFIX/$EXPERIMENT" "python $EXPERIMENT_PATH > $STDOUT_PATH 2> $STDERR_PATH"

### 3rd Phase: Download Experimental Results ###

- name: download_exp1
  description: Download experimental results from server
  envs:
    EXPERIMENT: exp1
  depends_on:
    run:
    - run_exp1
  requirements:
    run:
    - has_lock_file: "==Yes"
    - has_marker_file: "==Yes"
    # Requires that Tmux session has ended
    - tmux_count: "<=0"
  commands:
    run:
    # Run scp on local to download STDOUT and STDERR files to the local example directory
    - "echo Downloading experimental results from $NOODLES_SERVER_NAME"
    - "local:scp $NOODLES_SERVER_AUTHORITY:$ESCAPED_STDOUT_PATH $LOCAL_DIR"
    - "local:scp $NOODLES_SERVER_AUTHORITY:$ESCAPED_STDERR_PATH $LOCAL_DIR"
    # Remove the lock file
    - "rm -f $LOCK_FILE_PATH"

- name: download_exp2
  description: Download experimental results from server
  envs:
    EXPERIMENT: exp2
  depends_on:
    run:
    - run_exp2
  requirements:
    run:
    - has_lock_file: "==Yes"
    - has_marker_file: "==Yes"
    # Requires that Tmux session has ended
    - tmux_count: "<=0"
  commands:
    run:
    # Run scp on local to download STDOUT and STDERR files to the local example directory
    - "echo Downloading experimental results from $NOODLES_SERVER_NAME"
    - "local:scp $NOODLES_SERVER_AUTHORITY:$ESCAPED_STDOUT_PATH $LOCAL_DIR"
    - "local:scp $NOODLES_SERVER_AUTHORITY:$ESCAPED_STDERR_PATH $LOCAL_DIR"
    # Remove the lock file
    - "rm -f $LOCK_FILE_PATH"

- name: download_exp3
  description: Download experimental results from server
  envs:
    EXPERIMENT: exp3
  depends_on:
    run:
    - run_exp3
  requirements:
    run:
    - has_lock_file: "==Yes"
    - has_marker_file: "==Yes"
    # Requires that Tmux session has ended
    - tmux_count: "<=0"
  commands:
    run:
    # Run scp on local to download STDOUT and STDERR files to the local example directory
    - "echo Downloading experimental results from $NOODLES_SERVER_NAME"
    - "local:scp $NOODLES_SERVER_AUTHORITY:$ESCAPED_STDOUT_PATH $LOCAL_DIR"
    - "local:scp $NOODLES_SERVER_AUTHORITY:$ESCAPED_STDERR_PATH $LOCAL_DIR"
    # Remove the lock file
    - "rm -f $LOCK_FILE_PATH"

################################################################################
# Servers
################################################################################

# The default properties for each server
server_default:
  # Path to the private key on local
  private_key_path: $HOME/.ssh/id_rsa
  # Username on the server (e.g., 'user1')
  username: $USER

# All servers
servers:
- name: Server 1
  # Hostname of the server (e.g., "server1.example.com", "123.123.123.123")
  hostname: server1
- name: Server 2
  # Hostname of the server (e.g., "server1.example.com", "123.123.123.123")
  hostname: server2

################################################################################
# Requirements
################################################################################

# Commands to run to check requirements on servers
requirements:
  # Check whether the lock file "$LOCK_FILE_PATH" exists
  has_lock_file: "[ -f $LOCK_FILE_PATH ] && echo -n Yes || echo -n No"
  # Check whether the marker file "$MARKER_PATH" exists
  has_marker_file: "[ -f $MARKER_PATH ] && echo -n Yes || echo -n No"
  # Count the Tmux session of the name "$TMUX_SESSION_PREFIX/$EXPERIMENT"
  tmux_count: "tmux ls 2>/dev/null | grep $TMUX_SESSION_PREFIX/$EXPERIMENT | wc -l"

################################################################################
# Deployment
################################################################################

# Path in each command type, as a string for Noodles to write the current
# deployment status to the file in each deployment round
write_status_to:
  run: $LOCAL_DIR/noodles_status.yml

# The interval to run each deployment round
round_interval: 10

# The interval to deploy each experiment in each round
deployment_interval: 0

################################################################################
# Error Handling
################################################################################

# Whether to check any nonzero return code and nonempty stderr and raise error
check_any_errors: True

# List of error handlers
error_handlers:
- name: Ignore git cloning message
  return_code: 0
  stderr_pattern: "^Cloning into 'TensorFlow-Examples'\\.\\.\\.\\s+$"
  action: continue
- name: Ignore git clone already exists error
  return_code: 0
  stderr_pattern: "^fatal: destination path 'TensorFlow-Examples' already exists and is not an empty directory.\\s+$"
  action: continue
